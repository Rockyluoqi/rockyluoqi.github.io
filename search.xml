<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog搭建指南汇总</title>
    <url>/2022/11/05/Blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>花了一点时间搭个小博客，也间接强迫自己做一些知识和思考的输出，主要记录一些图形渲染方面的内容吧，工作三年还是有不少收获，常写常新</p>
<span id="more"></span>
<h4 id="博客搭建From-zlp">博客搭建From zlp</h4>
<p><a href="https://imzlp.com/posts/58952/">https://imzlp.com/posts/58952/</a></p>
<h4 id="个人域名申请">个人域名申请</h4>
<p>腾讯云</p>
<blockquote>
<p>有一点需要注意，在设置dsn解析的时候最好都用cname，这样方便后面设置https<br>
升级https在github.io的setting里面可以直接设置，很方便</p>
</blockquote>
<h4 id="做SEO">做SEO</h4>
<p><a href="http://duansm.top/2018/08/08/hexo-sitemap/">http://duansm.top/2018/08/08/hexo-sitemap/</a></p>
]]></content>
  </entry>
  <entry>
    <title>UE5 Release的重要feature</title>
    <url>/2022/11/06/UE5-Release%E7%9A%84%E9%87%8D%E8%A6%81feature/</url>
    <content><![CDATA[<p><a href="https://docs.unrealengine.com/5.0/zh-CN/unreal-engine-5-0-release-notes/">UE5 release note</a><br>
从UE5的release note里面摘取一些重要的feature和bug修复及优化，当作是一个release note阅读笔记</p>
<span id="more"></span>
<h4 id="Feature">Feature</h4>
<ul>
<li>luman nanite不用多说</li>
<li>VSM，移动端有无可能？</li>
<li>Temporal Super Resolution代替taa，1080-&gt;4k，降低taa重影</li>
<li><strong>局部曝光处理Local Exposure，精细调节局部曝光</strong></li>
<li><strong>world partition</strong>重点关注，数据层概念，actor文件
<ul>
<li>自动网格化的hlod，自动创建数据驱动的自定义hlod层，优化加载区外的大量静态actor</li>
<li>大世界坐标</li>
</ul>
</li>
<li>chaos布料+物理场</li>
<li>Unreal Insights更新
<ul>
<li><strong>Memory Insights</strong></li>
<li><strong>Task Graph Insights</strong>可以看到task的关系，牛逼</li>
<li>上下文切换</li>
</ul>
</li>
</ul>
<p>移动平台</p>
<ul>
<li>android文件服务器</li>
<li><strong>android二进制文件改进</strong></li>
<li>gles3.2 + vulkan dxc</li>
<li>sss</li>
<li><strong>dfshadow</strong></li>
<li>csm cache</li>
<li>skinCache</li>
<li><strong>GPU Scene Instancing</strong>，动态实例化物体</li>
</ul>
<h4 id="Bug-Fix">Bug Fix</h4>
<p>重点关注移动端和rendering</p>
<h4 id="Optimization">Optimization</h4>
<h4 id="Mobile-Rendering"><strong>Mobile Rendering</strong></h4>
<p>New:</p>
<ul>
<li>
<p>The mobile deferred and forward lighting calculations are now unified.</p>
</li>
<li>
<p>Added an option to use high quality BRDF on mobile, same as with PC.</p>
</li>
<li>
<p>If a light shading model is not supported on mobile, it will now fall back to the default light shading model.</p>
</li>
<li>
<p>Use EnvBrdf for mobile deferring lighting pass.</p>
</li>
<li>
<p>Mobile now supports the Subsurface and PreIntegrated Skin shading models. Subsurface Profile shading on mobile uses preintegral burley diffusion on ring, just like the PreIntegrated Skin but could be generated at runtime based on Burley inputs.</p>
</li>
<li>
<p>Vulkan now uses G8 format for mobile Ground Truth Ambient Occlusion (GTAO). Enabled mobile AO and PPR on high-end mobile devices.</p>
</li>
<li>
<p>Added support for Mobile Deferred Rendering mode on Android OpenGL ES.</p>
</li>
<li>
<p>Integrated Signed Distance Fields to Mobile Deferred Renderer.</p>
</li>
<li>
<p>Added GL_MAX_TEXTURE_BUFFER_SIZE to OpenGLES.h to not depend on the extension GL_MAX_TEXTURE_BUFFER_SIZE_EXT.</p>
</li>
<li>
<p>The variable r.MobileNumDynamicPointLights is now read from the platform .ini file instead of from the project console variable. The console variable r.MobileNumDynamicPointLights was added to the shader keystring.</p>
</li>
<li>
<p>Disabled Parallel RDG for Mobile Platforms from the RenderGraph.</p>
</li>
<li>
<p>Hair Materials now directly use the Hair Shading Model instead of doing so with a FeatureLevelSwitchExpression, improving hair Shading Model support on mobile.</p>
</li>
<li>
<p>Added support for a Skin Cache on mobile platforms.</p>
</li>
<li>
<p>Set Fast Approximate Anti-Aliasing (FXAA) quality to 0 on mobile platforms by default.</p>
</li>
<li>
<p>Added an option for projects to disable support for per-pixel Material shading models on mobile platforms. Use the console variable r.Mobile.AllowPerPixelShadingModels=0.</p>
</li>
<li>
<p>Account for Reflection Capture influence radius when finding closest capture for an object. Fallback to skylight reflection when there are no influencing Reflection Captures on mobile platforms.</p>
</li>
<li>
<p>Removed perspective correct shadow depth shader permutation when its not required on mobile platforms</p>
</li>
</ul>
<p>Improvement:</p>
<ul>
<li>Removed NoLightMap shader permutation for Materials that are not using it on mobile platforms.</li>
</ul>
<p>Crash Fix:</p>
<ul>
<li>Fixed a crash on mobile while rendering custom depth primitives that require scene texture access.</li>
</ul>
<p>Bug Fix:</p>
<ul>
<li>
<p>Fixed an issue where the brightness of the Reflection Captures couldn’t be changed at runtime on mobile.</p>
</li>
<li>
<p>Fixed the specular artifacts that would occur on Snapdragon 845 devices.</p>
</li>
<li>
<p>Disabled mobile MSAA if DepthFullPrepass is enabled.</p>
</li>
<li>
<p>Fixed an issue where depth was not stored with fullprepass enabled.</p>
</li>
<li>
<p>Fixed an issue with incorrect depth stencil access flag in mobile multi-view rendering.</p>
</li>
<li>
<p>Integrated mobile Static Lighting when Distance Fields are enabled.</p>
</li>
<li>
<p>Enqueue FrameSyncEvent ReleaseResource on the Render Thread when in the RHI thread in OpenGLViewport.</p>
</li>
<li>
<p>Resolved a Depth issue with Editor Primitives in Mobile Preview.</p>
</li>
<li>
<p>Implemented a Binary Cache fix for the Compute shader and fixed calculation of ShaderLib Processing time.</p>
</li>
<li>
<p>Fixed a bug that caused Editor to stall in the Material Editor while in Mobile Preview.</p>
</li>
<li>
<p>Fixed Custom Stencil and Depth on mobile by making them not always memoryless. This changes the logic back to the way it was implemented in SceneRenderTargets.</p>
</li>
<li>
<p>Resolve issues with texture mip generation at runtime on Android devices running Vulkan.</p>
</li>
<li>
<p>Resolved an issue preventing PerlinNoise3D texture from correctly initializing on mobile platforms.</p>
</li>
<li>
<p>Allow access to CustomDepth and CustomStencil textures in Decal Materials for mobile platforms.</p>
</li>
</ul>
<p>Removed:</p>
<ul>
<li>
<p>Removed IsMobileDistanceFieldShadowingEnabled.</p>
</li>
<li>
<p>Removed the shader define MOBILE_PROPAGATE_ALPHA, and temporarily removed premultiply alpha. FXAA luminance calculation was moved from the tonemapper to FXAA when MobilePropagateAlpha is enabled.</p>
</li>
<li>
<p>Removed the OpacitySceneCapturePass from MobileSceneCapture since Depth is now stored in a different Render target. Moved everything to the shared SceneCaptureRendering file and removed MobileSceneCapture.usf.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>UE5</category>
      </categories>
      <tags>
        <tag>Unreal Engine 5</tag>
        <tag>UE5</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.1 ReleaseNotes关键特性速览</title>
    <url>/2022/11/20/UE5-1-ReleaseNotes%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7%E9%80%9F%E8%A7%88/</url>
    <content><![CDATA[<p><img src="/2022/11/20/UE5-1-ReleaseNotes%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7%E9%80%9F%E8%A7%88/top.png" alt="Top"><br>
Epic在上周正式推出了<a href="https://docs.unrealengine.com/5.1/en-US/unreal-engine-5.1-release-notes/">ue5.1</a>，有一些比较重要的特性将在这里做简要介绍，有哪些渲染向更新以及可以用在移动端的特性也将重点介绍。作为一个小的总结，梳理引擎更新的思路和发展的脉络。</p>
<span id="more"></span>
<p>可以看到官方导览中Lumen，Nanite和vsm仍旧是花费最多的更新部分。WorldPartition也有所改进。虚拟制片等特性就不提了。</p>
<h4 id="Lumen">Lumen</h4>
<p><strong>Lumen</strong>的Two-Sided Foliage相当好看，也就文章开头的图片。stochastic semi-transparent distance field ray trace听着就很高大上，半透明距离场有点意思可以解决过遮挡问题。还有一些关于降噪，反射方面的更新，大家可以按需了解。</p>
<h4 id="Nanite"><strong>Nanite</strong></h4>
<p>现在可以使用双面材质了，高面数的Foliage游刃有余，但仍旧不是一个太成熟的方案，还需要更多的改进和测试，WPO都是beta，那还是再等等吧。实验性支持了地形，还是比较关键的特性，期待。</p>
<h4 id="TSR"><strong>TSR</strong></h4>
<p>改进，半透明的问题不知道改进到了何种程度，flickering和moire有所优化，ghost改进，temporal的大坑持续改进中。</p>
<p><strong>PathTracer</strong>的一大堆优化</p>
<h4 id="GPU-Lightmass"><strong>GPU Lightmass</strong></h4>
<p>没想到epic还在烘焙上持续更新，也算是给手游和一些基于烘焙的项目的或多或少的支持，可以尝试一下，之前测试是GPU的烘焙效果还是达不到CPU Lightmass。其中一个比较有意思的点是优化了VLM的探针数量，可以下降25%，而且GPU显存也能节省3/4，有点东西。</p>
<h4 id="半透明的覆盖材质"><strong>半透明的覆盖材质</strong></h4>
<p>官方终于实现了2 pass的材质系统，这么简单的需求官方终于做了，看介绍说是用在半透明材质做效果上，其实描边也能用这个材质槽完成。</p>
<h4 id="Strata材质"><strong>Strata材质</strong></h4>
<p>为了支持这个材质系统，ue更新了大部分原有shader，可以混合多种shading model渲染，上分层材质我能想到epic的思路是想更统一和简化一种制作规范，在material shader中解决更多问题而不是更繁杂的shader外配置，为物体带来更加丰富的材质表现。试想下面火山材质和single layer water的混合是不是很有意思。clear coat混合更酷炫的车型外观。</p>
<p><img src="/2022/11/20/UE5-1-ReleaseNotes%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7%E9%80%9F%E8%A7%88/strata.png" alt="Strata"></p>
<h4 id="Texture-and-Texture-Asset"><strong>Texture and Texture Asset</strong></h4>
<p>加入了R32f和RGBA32F通道位数更多的texture格式。</p>
<p>材质编辑器中的一些Material Expression现在可以直接在编辑器中调节值了，不用点去detail改default value.</p>
<h4 id="Light-Mixer"><strong>Light Mixer</strong></h4>
<p>调节场景整体光源更加方便，在为了诸如动态光照效果去调灯的时候方便一些，可以以此为底盘二次开发符合项目需要的Mixer。</p>
<h4 id="VSM"><strong>VSM</strong></h4>
<p>的远距离local light渲染，诸如点光 spot light等可以在远处也可以渲染出阴影。，优化了效率。</p>
<h4 id="World-Partition"><strong>World Partition</strong></h4>
<p>DataLayer拆成了两个独立的部分，一种是world层面的资源，一种是特定于world的资源，等于给datalayer又加了一层子layer，项目组也可以继续扩展这种layer层级。<br>
Epic提到data layer适合创建相同world的变体，可能也是这种改动的考虑。<br>
WP HLOD layer提供了对Water System的支持。以及一些actor编辑协作上的更新。<br>
LWC可以支持到88000000千米范围了。</p>
<h4 id="Animation">Animation</h4>
<p>Deformer Framework，Epic为ML Deformer开发了一个新的框架，用ML来为deformer增加更加准确的解算。可以去关注UOD2022的演讲录像，王弥做了很多分享。其中还有一个比较有意思的compute framework，现在ue可以让非programmer更容易上手进行compute shader的编程了，也做了图形化系统叫做Compute Graph，详情也可以去看这次演讲，这里放一个架构图大家感受一下，类似材质编辑器。<br>
<img src="/2022/11/20/UE5-1-ReleaseNotes%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7%E9%80%9F%E8%A7%88/ComputeGraph.png" alt="ComputeGraph"></p>
<p>Motion Matching集成进ue5，少量动画自动生成更匹配动作的blend pose<br>
其他的动画的同学可以自行去看release note</p>
<h4 id="Mobile">Mobile</h4>
<p>最后我们看一下最关注的移动平台更新，延迟着色正式发布，经过多个版本的迭代终于趋向稳定，支持了一些新的shading model，通过各种魔改gbuffer format完成的，刘伟有分享过。其他特性基本5.0.3也都实现了。统一了shader compiler为DXR，移动平台shader大增强，微软强大社区引入。为移动平台新增精度选项，关于移动平台的精度问题，我会再写一篇文章来讲一下。<br>
cluster光源的支持及其反射支持，这块官方一比带过其实做了大量的移植工作，但实际性能可能并不理想。<br>
PSO上会逐资产分解为PSO cache，粒度更小，按需编译，减少内存占用。<br>
Android OGl和Vulkan用并行加速了PSO的预编译速度。在移动预览上可以查看更多shader platform的效果了。Android vulkan和Metal iOS有不同的渲染设置。</p>
<p>基本上速览就到这了，如果对物理和gpp，人工智能，niagara，Insights需要更多了解，可以自行查看更多的release note细节。</p>
]]></content>
  </entry>
  <entry>
    <title>想法</title>
    <url>/2022/11/05/%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<p>记录从此开始</p>
]]></content>
      <tags>
        <tag>Self</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5移动端的精度小坑</title>
    <url>/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/</url>
    <content><![CDATA[<p>在某日调试安卓的过程中发现了一点ue精度上的小问题，关于地形，在某snapdragon机器上跑出大规模的花屏（Nanite的三角形的错觉hh)，最后排查到是精度问题导致的，发现UE5相比ue4提供了更加精细的精度控制，只用于usf和ush文件。<br>
<img src="/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/1.png" alt="1"></p>
<span id="more"></span>
<p>这篇文章可以作为一个精度问题的参考<a href="https://zhuanlan.zhihu.com/p/440619745">UE中的浮点数精度问题</a>，感谢博主，里面也提到一些对精度要求高的场景比如地形uv计算，水材质，天空材质这种大尺寸材质的计算中最好使用全精度去做。half最大也就65504，很容易精度爆掉。去看了ue5的代码发现，force float主要在两个地方生效，一个是在Platform.ush中，这里控制的主要是所有平台编译后的shader中的精度，如果这里force float也就是上面的Use Full-precision for every float，会使得包括所有引擎在内的shader，material生成shader都使用全精度。注释里提到es/metal强制为half使用float，平台没有做低精度的优化，而vk和es31会为half值使用相对精度。放截图<img src="/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/2.png" alt="2"><br>
而对于Use Full-precision for MaterialExpressions only，则是在common.ush中的define里转换<img src="/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/3.png" alt="3"><br>
这里的转换对从Material编译生成的shader起效， Vertex shader中因为uv和位置计算则全程使用float。</p>
<p>最后对于metal确实在MetalShaderCompiler中有这样一句强制指定，怪不得没问题，所以现在setting中的Force 32bit Floating Point Precision其实是默认启用的，关闭后也没啥用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AdditionalDefines.<span class="built_in">SetDefine</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;FORCE_FLOATS&quot;</span>), (uint32)<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>在关于移动平台的开发中，精度坑是永远躲不掉，硬件坑很多而且一直在变化中，需要经常关注。</p>
<hr>
<p>更新在ue5.1 release中，加入了对移动平台的单独设置，粒度更小一些，推荐设置一下。<br>
<img src="/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/4.png" alt="4"></p>
<hr>
<p>更新一下UE5.1最新的修改</p>
<p>Epic在UE5.1版本中更新了对iOS/Metal平台的半精度支持，稍微看看它的实现，<a href="https://github.com/EpicGames/UnrealEngine/commit/4e14e3f3864a994379da51567791966597629589#diff-5963bff9ef52bec27f0a28bf16791d7b93d16018199341055438477f1fe14b17">commit在这</a></p>
<p>这是一个稍微有些规模的改动，但很有用</p>
<p>首先去掉了之前强制写死ForceFloats的一堆define</p>
<p>在编译端做了一些工作</p>
<p>MetalDerivedData.cpp中的这个函数Patch16bitInHlslSource很有意思，在UE5中统一将shader编译器换成了DXC，而DXC是不支持half精度的Texture和Buffer，会引发layout错误，统一将hlsl中的half换成了float。请注意这个编译器限制。</p>
<p>同时修改中还处理了很多不能用half的情况，比如Spirv中对fastNormalize的参数就不能使用half。</p>
<p>但是在platform的修改只有下面这一处，也就是很有限的地方替换float，Epic并没有大规模支持，这个修改机制还在测试，在BaseEngine.ini还是将IOSRuntimeSettings默认ForceFloats = true。如果想尝试可以自己在float的地方改成下面比如HALF_TYPE的def。虽然暂时没有在PS中的转译大规模启用，但是它用在了另外一个重要的地方。<img src="/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/5.png" alt="5"><br>
可以看到修改在MetalDerivedData.cpp中，PatchSpecialTextureInHlslSource函数中添加了half的支持，可以看出这个函数只处理gl_LastFragData，也就是和FrameBuffer的格式有关系，读写的带宽可以减少一半，对移动端简直是天使的馈赠。遗憾的是，可以观察到，只有PostProcess的部分Pass有所应用，需要更进一步的测试。但是前面DXC的限制不是一个好消息，希望可以在Texture和Buffer也可以尽快应用吧，进一步减少读写带宽。虽然特性有点瘸腿，但是方向总是好的，读者如果有兴趣也可以魔改一下看看是不是有所收益。<br>
<img src="/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/6.png" alt="5"><br>
<img src="/2022/11/20/UE5%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E7%B2%BE%E5%BA%A6%E5%B0%8F%E5%9D%91/7.png" alt="5"></p>
]]></content>
      <categories>
        <category>UE5</category>
      </categories>
      <tags>
        <tag>Unreal Engine 5</tag>
        <tag>UE5</tag>
        <tag>Precision</tag>
        <tag>精度</tag>
        <tag>移动端</tag>
        <tag>mobile</tag>
      </tags>
  </entry>
</search>
